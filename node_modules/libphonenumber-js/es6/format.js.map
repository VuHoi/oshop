{"version":3,"sources":["../source/format.js"],"names":["matches_entirely","parse_phone_number_and_country_phone_code","VALID_PUNCTUATION","get_phone_code","get_formats","get_format_pattern","get_format_format","get_format_leading_digits_patterns","get_format_national_prefix_formatting_rule","get_format_national_prefix_is_optional_when_formatting","get_format_international_format","get_metadata_by_country_phone_code","format","first_argument","second_argument","third_argument","fourth_argument","sort_out_arguments","input","format_type","metadata","country_metadata","country","countries","phone","country_phone_code","number","national_number","format_national_number","FIRST_GROUP_PATTERN","format_national_number_using_format","international","enforce_national_prefix","format_pattern_matcher","RegExp","national_prefix_formatting_rule","national_prefix_may_be_omitted","replace","formatted_number","local_to_international_style","format_as","choose_format_for_number","available_formats","length","last_leading_digits_pattern","search","local","trim","Error"],"mappings":"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","file":"format.js","sourcesContent":["// This is a port of Google Android `libphonenumber`'s\r\n// `phonenumberutil.js` of 17th November, 2016.\r\n//\r\n// https://github.com/googlei18n/libphonenumber/commits/master/javascript/i18n/phonenumbers/phonenumberutil.js\r\n\r\nimport { matches_entirely } from './common'\r\n\r\nimport\r\n{\r\n\tparse_phone_number_and_country_phone_code,\r\n\tVALID_PUNCTUATION\r\n}\r\nfrom './parse'\r\n\r\nimport\r\n{\r\n\tget_phone_code,\r\n\tget_formats,\r\n\tget_format_pattern,\r\n\tget_format_format,\r\n\tget_format_leading_digits_patterns,\r\n\tget_format_national_prefix_formatting_rule,\r\n\tget_format_national_prefix_is_optional_when_formatting,\r\n\tget_format_international_format,\r\n\tget_metadata_by_country_phone_code\r\n}\r\nfrom './metadata'\r\n\r\n// Formats a phone number\r\n//\r\n// Example use cases:\r\n//\r\n// ```js\r\n// format('8005553535', 'RU', 'International')\r\n// format('8005553535', 'RU', 'International', metadata)\r\n// format({ phone: '8005553535', country: 'RU' }, 'International')\r\n// format({ phone: '8005553535', country: 'RU' }, 'International', metadata)\r\n// format('+78005553535', 'National')\r\n// format('+78005553535', 'National', metadata)\r\n// ```\r\n//\r\nexport default function format(first_argument, second_argument, third_argument, fourth_argument)\r\n{\r\n\tconst { input, format_type, metadata } = sort_out_arguments(first_argument, second_argument, third_argument, fourth_argument)\r\n\r\n\tlet country_metadata\r\n\r\n\tif (input.country)\r\n\t{\r\n\t\tcountry_metadata = metadata.countries[input.country]\r\n\t}\r\n\r\n\tconst { country_phone_code, number } = parse_phone_number_and_country_phone_code(input.phone, metadata)\r\n\r\n\tif (country_phone_code)\r\n\t{\r\n\t\t// Check country restriction\r\n\t\tif (input.country && country_metadata &&\r\n\t\t\tcountry_phone_code !== get_phone_code(country_metadata))\r\n\t\t{\r\n\t\t\treturn input.phone\r\n\t\t}\r\n\r\n\t\tcountry_metadata = get_metadata_by_country_phone_code(country_phone_code, metadata)\r\n\t}\r\n\r\n\tif (!country_metadata)\r\n\t{\r\n\t\treturn input.phone\r\n\t}\r\n\r\n\tswitch (format_type)\r\n\t{\r\n\t\tcase 'International':\r\n\t\t\tif (!number)\r\n\t\t\t{\r\n\t\t\t\treturn `+${get_phone_code(country_metadata)}`\r\n\t\t\t}\r\n\t\t\tconst national_number = format_national_number(number, 'International', false, country_metadata)\r\n\t\t\treturn `+${get_phone_code(country_metadata)} ${national_number}`\r\n\r\n\t\tcase 'International_plaintext':\r\n\t\t\treturn `+${get_phone_code(country_metadata)}${input.phone}`\r\n\r\n\t\tcase 'National':\r\n\t\t\tif (!number)\r\n\t\t\t{\r\n\t\t\t\treturn ''\r\n\t\t\t}\r\n\t\t\treturn format_national_number(number, 'National', false, country_metadata)\r\n\t}\r\n}\r\n\r\n// This was originally set to $1 but there are some countries for which the\r\n// first group is not used in the national pattern (e.g. Argentina) so the $1\r\n// group does not match correctly.  Therefore, we use \\d, so that the first\r\n// group actually used in the pattern will be matched.\r\nexport const FIRST_GROUP_PATTERN = /(\\$\\d)/\r\n\r\nexport function format_national_number_using_format(number, format, international, enforce_national_prefix, country_metadata)\r\n{\r\n\tconst format_pattern_matcher = new RegExp(get_format_pattern(format))\r\n\r\n\tconst national_prefix_formatting_rule = get_format_national_prefix_formatting_rule(format, country_metadata)\r\n\r\n\t// National prefix is omitted if there's no national prefix formatting rule\r\n\t// set for this country, or when this rule is set but\r\n\t// national prefix is optional for this phone number format\r\n\t// (and it is not enforced explicitly)\r\n\tconst national_prefix_may_be_omitted = !national_prefix_formatting_rule ||\r\n\t\t(national_prefix_formatting_rule && get_format_national_prefix_is_optional_when_formatting(format, country_metadata) && !enforce_national_prefix)\r\n\r\n\tif (!international && !national_prefix_may_be_omitted)\r\n\t{\r\n\t\treturn number.replace\r\n\t\t(\r\n\t\t\tformat_pattern_matcher,\r\n\t\t\tget_format_format(format).replace\r\n\t\t\t(\r\n\t\t\t\tFIRST_GROUP_PATTERN,\r\n\t\t\t\tnational_prefix_formatting_rule\r\n\t\t\t)\r\n\t\t)\r\n\t}\r\n\r\n\tconst formatted_number = number.replace\r\n\t(\r\n\t\tformat_pattern_matcher,\r\n\t\tinternational ? get_format_international_format(format) : get_format_format(format)\r\n\t)\r\n\r\n\tif (international)\r\n\t{\r\n\t\treturn local_to_international_style(formatted_number)\r\n\t}\r\n\r\n\treturn formatted_number\r\n}\r\n\r\nexport function format_national_number(number, format_as, enforce_national_prefix, country_metadata)\r\n{\r\n\tconst format = choose_format_for_number(get_formats(country_metadata), number)\r\n\r\n\tif (!format)\r\n\t{\r\n\t\treturn number\r\n\t}\r\n\r\n\treturn format_national_number_using_format(number, format, format_as === 'International', enforce_national_prefix, country_metadata)\r\n}\r\n\r\nexport function choose_format_for_number(available_formats, national_number)\r\n{\r\n\tfor (let format of available_formats)\r\n\t{\r\n\t\t// Validate leading digits\r\n\t\tif (get_format_leading_digits_patterns(format).length > 0)\r\n\t\t{\r\n\t\t\t// The last leading_digits_pattern is used here, as it is the most detailed\r\n\t\t\tconst last_leading_digits_pattern = get_format_leading_digits_patterns(format)[get_format_leading_digits_patterns(format).length - 1]\r\n\r\n\t\t\t// If leading digits don't match then move on to the next phone number format\r\n\t\t\tif (national_number.search(last_leading_digits_pattern) !== 0)\r\n\t\t\t{\r\n\t\t\t\tcontinue\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Check that the national number matches the phone number format regular expression\r\n\t\tif (matches_entirely(national_number, new RegExp(get_format_pattern(format))))\r\n\t\t{\r\n\t\t\treturn format\r\n\t\t}\r\n\t}\r\n}\r\n\r\n// Removes brackets and replaces dashes with spaces.\r\n//\r\n// E.g. \"(999) 111-22-33\" -> \"999 111 22 33\"\r\n//\r\nexport function local_to_international_style(local)\r\n{\r\n\treturn local.replace(new RegExp(`[${VALID_PUNCTUATION}]+`, 'g'), ' ').trim()\r\n}\r\n\r\n// Sort out arguments\r\nfunction sort_out_arguments(first_argument = '', second_argument, third_argument, fourth_argument)\r\n{\r\n\tlet input\r\n\tlet format_type\r\n\tlet metadata\r\n\r\n\t// Sort out arguments\r\n\tif (typeof first_argument === 'string')\r\n\t{\r\n\t\t// If country code is supplied\r\n\t\tif (typeof third_argument === 'string')\r\n\t\t{\r\n\t\t\t// Will be `parse()`d later in code\r\n\t\t\tinput =\r\n\t\t\t{\r\n\t\t\t\tphone   : first_argument,\r\n\t\t\t\tcountry : second_argument\r\n\t\t\t}\r\n\r\n\t\t\tformat_type = third_argument\r\n\t\t\tmetadata    = fourth_argument\r\n\t\t}\r\n\t\t// Just an international phone number is supplied\r\n\t\telse\r\n\t\t{\r\n\t\t\t// Will be `parse()`d later in code\r\n\t\t\tinput =\r\n\t\t\t{\r\n\t\t\t\tphone : first_argument\r\n\t\t\t}\r\n\r\n\t\t\tif (typeof second_argument !== 'string')\r\n\t\t\t{\r\n\t\t\t\tthrow new Error('Format type argument not passed for `format()`')\r\n\t\t\t}\r\n\r\n\t\t\tformat_type = second_argument\r\n\t\t\tmetadata    = third_argument\r\n\t\t}\r\n\t}\r\n\telse\r\n\t{\r\n\t\tinput       = first_argument\r\n\t\tformat_type = second_argument\r\n\t\tmetadata    = third_argument\r\n\t}\r\n\r\n\t// Sanity check\r\n\tif (!metadata)\r\n\t{\r\n\t\tthrow new Error('Metadata not passed')\r\n\t}\r\n\r\n\tswitch (format_type)\r\n\t{\r\n\t\tcase 'International':\r\n\t\tcase 'International_plaintext':\r\n\t\tcase 'National':\r\n\t\t\tbreak\r\n\t\tdefault:\r\n\t\t\tthrow new Error(`Unknown format type argument passed to \"format()\": \"${format_type}\"`)\r\n\t}\r\n\r\n\treturn { input, format_type, metadata }\r\n}"]}