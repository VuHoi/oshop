{"version":3,"sources":["../source/format.js"],"names":["format","format_national_number_using_format","format_national_number","choose_format_for_number","local_to_international_style","first_argument","second_argument","third_argument","fourth_argument","sort_out_arguments","input","format_type","metadata","country_metadata","country","countries","phone","country_phone_code","number","national_number","FIRST_GROUP_PATTERN","international","enforce_national_prefix","format_pattern_matcher","RegExp","national_prefix_formatting_rule","national_prefix_may_be_omitted","replace","formatted_number","format_as","available_formats","length","last_leading_digits_pattern","search","local","trim","Error"],"mappings":"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","file":"format.js","sourcesContent":["// This is a port of Google Android `libphonenumber`'s\r\n// `phonenumberutil.js` of 17th November, 2016.\r\n//\r\n// https://github.com/googlei18n/libphonenumber/commits/master/javascript/i18n/phonenumbers/phonenumberutil.js\r\n\r\nimport { matches_entirely } from './common'\r\n\r\nimport\r\n{\r\n\tparse_phone_number_and_country_phone_code,\r\n\tVALID_PUNCTUATION\r\n}\r\nfrom './parse'\r\n\r\nimport\r\n{\r\n\tget_phone_code,\r\n\tget_formats,\r\n\tget_format_pattern,\r\n\tget_format_format,\r\n\tget_format_leading_digits_patterns,\r\n\tget_format_national_prefix_formatting_rule,\r\n\tget_format_national_prefix_is_optional_when_formatting,\r\n\tget_format_international_format,\r\n\tget_metadata_by_country_phone_code\r\n}\r\nfrom './metadata'\r\n\r\n// Formats a phone number\r\n//\r\n// Example use cases:\r\n//\r\n// ```js\r\n// format('8005553535', 'RU', 'International')\r\n// format('8005553535', 'RU', 'International', metadata)\r\n// format({ phone: '8005553535', country: 'RU' }, 'International')\r\n// format({ phone: '8005553535', country: 'RU' }, 'International', metadata)\r\n// format('+78005553535', 'National')\r\n// format('+78005553535', 'National', metadata)\r\n// ```\r\n//\r\nexport default function format(first_argument, second_argument, third_argument, fourth_argument)\r\n{\r\n\tconst { input, format_type, metadata } = sort_out_arguments(first_argument, second_argument, third_argument, fourth_argument)\r\n\r\n\tlet country_metadata\r\n\r\n\tif (input.country)\r\n\t{\r\n\t\tcountry_metadata = metadata.countries[input.country]\r\n\t}\r\n\r\n\tconst { country_phone_code, number } = parse_phone_number_and_country_phone_code(input.phone, metadata)\r\n\r\n\tif (country_phone_code)\r\n\t{\r\n\t\t// Check country restriction\r\n\t\tif (input.country && country_metadata &&\r\n\t\t\tcountry_phone_code !== get_phone_code(country_metadata))\r\n\t\t{\r\n\t\t\treturn input.phone\r\n\t\t}\r\n\r\n\t\tcountry_metadata = get_metadata_by_country_phone_code(country_phone_code, metadata)\r\n\t}\r\n\r\n\tif (!country_metadata)\r\n\t{\r\n\t\treturn input.phone\r\n\t}\r\n\r\n\tswitch (format_type)\r\n\t{\r\n\t\tcase 'International':\r\n\t\t\tif (!number)\r\n\t\t\t{\r\n\t\t\t\treturn `+${get_phone_code(country_metadata)}`\r\n\t\t\t}\r\n\t\t\tconst national_number = format_national_number(number, 'International', false, country_metadata)\r\n\t\t\treturn `+${get_phone_code(country_metadata)} ${national_number}`\r\n\r\n\t\tcase 'International_plaintext':\r\n\t\t\treturn `+${get_phone_code(country_metadata)}${input.phone}`\r\n\r\n\t\tcase 'National':\r\n\t\t\tif (!number)\r\n\t\t\t{\r\n\t\t\t\treturn ''\r\n\t\t\t}\r\n\t\t\treturn format_national_number(number, 'National', false, country_metadata)\r\n\t}\r\n}\r\n\r\n// This was originally set to $1 but there are some countries for which the\r\n// first group is not used in the national pattern (e.g. Argentina) so the $1\r\n// group does not match correctly.  Therefore, we use \\d, so that the first\r\n// group actually used in the pattern will be matched.\r\nexport const FIRST_GROUP_PATTERN = /(\\$\\d)/\r\n\r\nexport function format_national_number_using_format(number, format, international, enforce_national_prefix, country_metadata)\r\n{\r\n\tconst format_pattern_matcher = new RegExp(get_format_pattern(format))\r\n\r\n\tconst national_prefix_formatting_rule = get_format_national_prefix_formatting_rule(format, country_metadata)\r\n\r\n\t// National prefix is omitted if there's no national prefix formatting rule\r\n\t// set for this country, or when this rule is set but\r\n\t// national prefix is optional for this phone number format\r\n\t// (and it is not enforced explicitly)\r\n\tconst national_prefix_may_be_omitted = !national_prefix_formatting_rule ||\r\n\t\t(national_prefix_formatting_rule && get_format_national_prefix_is_optional_when_formatting(format, country_metadata) && !enforce_national_prefix)\r\n\r\n\tif (!international && !national_prefix_may_be_omitted)\r\n\t{\r\n\t\treturn number.replace\r\n\t\t(\r\n\t\t\tformat_pattern_matcher,\r\n\t\t\tget_format_format(format).replace\r\n\t\t\t(\r\n\t\t\t\tFIRST_GROUP_PATTERN,\r\n\t\t\t\tnational_prefix_formatting_rule\r\n\t\t\t)\r\n\t\t)\r\n\t}\r\n\r\n\tconst formatted_number = number.replace\r\n\t(\r\n\t\tformat_pattern_matcher,\r\n\t\tinternational ? get_format_international_format(format) : get_format_format(format)\r\n\t)\r\n\r\n\tif (international)\r\n\t{\r\n\t\treturn local_to_international_style(formatted_number)\r\n\t}\r\n\r\n\treturn formatted_number\r\n}\r\n\r\nexport function format_national_number(number, format_as, enforce_national_prefix, country_metadata)\r\n{\r\n\tconst format = choose_format_for_number(get_formats(country_metadata), number)\r\n\r\n\tif (!format)\r\n\t{\r\n\t\treturn number\r\n\t}\r\n\r\n\treturn format_national_number_using_format(number, format, format_as === 'International', enforce_national_prefix, country_metadata)\r\n}\r\n\r\nexport function choose_format_for_number(available_formats, national_number)\r\n{\r\n\tfor (let format of available_formats)\r\n\t{\r\n\t\t// Validate leading digits\r\n\t\tif (get_format_leading_digits_patterns(format).length > 0)\r\n\t\t{\r\n\t\t\t// The last leading_digits_pattern is used here, as it is the most detailed\r\n\t\t\tconst last_leading_digits_pattern = get_format_leading_digits_patterns(format)[get_format_leading_digits_patterns(format).length - 1]\r\n\r\n\t\t\t// If leading digits don't match then move on to the next phone number format\r\n\t\t\tif (national_number.search(last_leading_digits_pattern) !== 0)\r\n\t\t\t{\r\n\t\t\t\tcontinue\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Check that the national number matches the phone number format regular expression\r\n\t\tif (matches_entirely(national_number, new RegExp(get_format_pattern(format))))\r\n\t\t{\r\n\t\t\treturn format\r\n\t\t}\r\n\t}\r\n}\r\n\r\n// Removes brackets and replaces dashes with spaces.\r\n//\r\n// E.g. \"(999) 111-22-33\" -> \"999 111 22 33\"\r\n//\r\nexport function local_to_international_style(local)\r\n{\r\n\treturn local.replace(new RegExp(`[${VALID_PUNCTUATION}]+`, 'g'), ' ').trim()\r\n}\r\n\r\n// Sort out arguments\r\nfunction sort_out_arguments(first_argument = '', second_argument, third_argument, fourth_argument)\r\n{\r\n\tlet input\r\n\tlet format_type\r\n\tlet metadata\r\n\r\n\t// Sort out arguments\r\n\tif (typeof first_argument === 'string')\r\n\t{\r\n\t\t// If country code is supplied\r\n\t\tif (typeof third_argument === 'string')\r\n\t\t{\r\n\t\t\t// Will be `parse()`d later in code\r\n\t\t\tinput =\r\n\t\t\t{\r\n\t\t\t\tphone   : first_argument,\r\n\t\t\t\tcountry : second_argument\r\n\t\t\t}\r\n\r\n\t\t\tformat_type = third_argument\r\n\t\t\tmetadata    = fourth_argument\r\n\t\t}\r\n\t\t// Just an international phone number is supplied\r\n\t\telse\r\n\t\t{\r\n\t\t\t// Will be `parse()`d later in code\r\n\t\t\tinput =\r\n\t\t\t{\r\n\t\t\t\tphone : first_argument\r\n\t\t\t}\r\n\r\n\t\t\tif (typeof second_argument !== 'string')\r\n\t\t\t{\r\n\t\t\t\tthrow new Error('Format type argument not passed for `format()`')\r\n\t\t\t}\r\n\r\n\t\t\tformat_type = second_argument\r\n\t\t\tmetadata    = third_argument\r\n\t\t}\r\n\t}\r\n\telse\r\n\t{\r\n\t\tinput       = first_argument\r\n\t\tformat_type = second_argument\r\n\t\tmetadata    = third_argument\r\n\t}\r\n\r\n\t// Sanity check\r\n\tif (!metadata)\r\n\t{\r\n\t\tthrow new Error('Metadata not passed')\r\n\t}\r\n\r\n\tswitch (format_type)\r\n\t{\r\n\t\tcase 'International':\r\n\t\tcase 'International_plaintext':\r\n\t\tcase 'National':\r\n\t\t\tbreak\r\n\t\tdefault:\r\n\t\t\tthrow new Error(`Unknown format type argument passed to \"format()\": \"${format_type}\"`)\r\n\t}\r\n\r\n\treturn { input, format_type, metadata }\r\n}"]}